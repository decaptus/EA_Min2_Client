{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js'; //actions creators are funcitions that return an action, and action is an object wich have type and payload \n//Las acciones son un bloque de información(objeto plano) que envia datos desde tu aplicación a tu store. Son la única fuente de información para el store. Las envias al store usando store.dispatch().\n//Actions creator\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts(); //we obtain a response of data from an api.get(url)\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    }); //dispatch takes an action object as parameter\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const likePost = (id, updatedata) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id, updatedata);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const Register = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.Register(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getQuest = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchQuest(); //we obtain a response of data from an api.get(url)\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    }); //dispatch takes an action object as parameter\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createQuest = quest => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createQuest(quest);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updateQuest = (id, quest) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updateQuest(id, quest);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const likeQuest = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likeQuest(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deleteQuest = id => async dispatch => {\n  try {\n    await api.deleteQuest(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["C:/Users/Eric/Documents/UPC/EA/Minimo2/Client/src/actions/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","message","createPost","post","updatePost","id","likePost","updatedata","deletePost","Register","getQuest","fetchQuest","createQuest","quest","updateQuest","likeQuest","deleteQuest"],"mappings":"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","sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\n\nimport * as api from '../api/index.js';\n\n\n//actions creators are funcitions that return an action, and action is an object wich have type and payload \n//Las acciones son un bloque de información(objeto plano) que envia datos desde tu aplicación a tu store. Son la única fuente de información para el store. Las envias al store usando store.dispatch().\n\n\n//Actions creator\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const { data } = await api.fetchPosts();        //we obtain a response of data from an api.get(url)\n\n    dispatch({ type: FETCH_ALL, payload: data });   //dispatch takes an action object as parameter\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createPost = (post) => async (dispatch) => {\n\n  try {\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: CREATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const likePost = (id, updatedata) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id, updatedata);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n  \n};\n\nexport const Register = (post) => async (dispatch) => {\n\n  try {\n    const { data } = await api.Register(post);\n\n    dispatch({ type: CREATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getQuest = () => async (dispatch) => {\n  try {\n    const { data } = await api.fetchQuest();        //we obtain a response of data from an api.get(url)\n\n    dispatch({ type: FETCH_ALL, payload: data });   //dispatch takes an action object as parameter\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createQuest = (quest) => async (dispatch) => {\n\n  try {\n    const { data } = await api.createQuest(quest);\n\n    dispatch({ type: CREATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const updateQuest = (id, quest) => async (dispatch) => {\n  try {\n    const { data } = await api.updateQuest(id, quest);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const likeQuest = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likeQuest(id);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const deleteQuest = (id) => async (dispatch) => {\n  try {\n    await api.deleteQuest(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n  \n};"]},"metadata":{},"sourceType":"module"}